version: 2

macros:
  - name: spatial_join_with_deduplication
    description: |
      Macro to perform a spatial join between two relations with deduplication of the
      geometries in the left table. For all left geometries that satisfy the predicate
      for more than one geometry in the right table, we compute their intersection and
      then choose the left geometry with the greatest intersection.
    arguments:
      - name: left_model
        type: string
        description: The left model to join. Can be a relation or CTE.
      - name: right_model
        type: string
        description: The right model to join. Can be a relation or CTE.
      - name: left_cols
        type: list of strings
        description: |
          List columns to keep from the left table
          (excluding the geometry column, which is always retained)
      - name: right_cols
        type: list of strings
        description: |
          List of columns to keep from the right table
          (excluding the geometry column, which is never retained).
          Cannot share any names with left_cols
      - name: left_geom
        type: string
        description: The name of the left geometry column, defaults to "geometry"
      - name: right_geom
        type: string
        description: The name of the right geometry column, defaults to "geometry"
      - name: op
        description: |
          The spatial predicate function to choose,
          defaults to "st_intersects"
      - name: kind
        type: string
        description: The kind of join, either "left" or "inner". Defaults to "left"
      - name: prefix
        type: string
        description: |
          An optional prefix to give to temporary CTEs to improve legibility and
          avoid name collisions.

  - name: validate_all_schemas
    description: |
      Macro to validate all model and source schemas in the project against their documentation.

      This macro creates a comprehensive report of schema validation issues across all models
      and sources in the project. It compares the documented columns in dbt YAML files with
      the actual columns in the database tables/views.

      The macro will always raise an error if validation issues are found, making it suitable
      for use in CI/CD pipelines to enforce schema documentation standards.
    arguments:
      - name: errors_only
        type: boolean
        description: |
          If true, only shows tables with validation errors. If false, shows all
          validation results including successful matches. Defaults to false.
      - name: undocumented_columns_as_errors
        type: boolean
        description: |
          If true, treats undocumented columns as validation errors. If false,
          undocumented columns are reported as warnings but don't cause failure.
          Defaults to true.

  - name: _get_all_table_columns
    description: |
      Helper macro to get all column information for models and sources in a single query.

      This macro efficiently retrieves column information from the database for all models
      and sources that have documented columns. It groups tables by database and queries
      each database separately for better performance.

      Note: This is a private helper macro used by validate_all_schemas and should not
      be called directly. It requires access to the dbt graph.

  - name: _validate_single_table_schema
    description: |
      Helper macro to validate a single table's schema against its documentation.

      This macro performs schema validation for a single model or source by comparing
      the documented columns in the dbt project with the actual columns in the database.

      The validation process:

      1. Retrieves actual columns from the pre-fetched table column information
      2. Extracts documented columns from the node's column definitions
      3. Identifies documented columns that are missing from the actual table
      4. Identifies actual columns that are not documented
      5. Returns a structured validation result with all findings

      Note: This is a private helper macro used by validate_all_schemas and should not
      be called directly.
    arguments:
      - name: node
        type: object
        description: The dbt node (model or source) to validate
      - name: table_columns_info
        type: dict
        description: Pre-fetched column information from _get_all_table_columns()
      - name: resource_type
        type: string
        description: The type of resource ('model' or 'source')
