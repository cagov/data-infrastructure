{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.2", "generated_at": "2025-10-16T21:10:52.304698Z", "invocation_id": "6c91b5b4-2c27-411f-ad87-7dc230689ee7", "invocation_started_at": "2025-10-16T21:10:43.054290Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.034893Z", "completed_at": "2025-10-16T21:10:51.041842Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.042448Z", "completed_at": "2025-10-16T21:10:51.042468Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.028267860412597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.geo_reference__us_building_footprints_with_tiger", "compiled": true, "compiled_code": "with footprints as ( -- noqa: ST03\n    select\n        \"release\",\n        \"capture_dates_range\",\n        \"geometry\"\n    from RAW_DEV.building_footprints.us_building_footprints\n),\n\nblocks_source as (\n    select *\n    from RAW_DEV.tiger_2022.blocks\n),\n\nplaces_source as (\n    select * from RAW_DEV.tiger_2022.places\n),\n\nblocks as ( -- noqa: ST03\n    select\n        countyfp20 as \"county_fips\",\n        tractce20 as \"tract\",\n        blockce20 as \"block\",\n        geoid20 as \"block_geoid\",\n        \"geometry\"\n    from blocks_source\n),\n\nplaces as ( -- noqa: ST03\n    select\n        placefp as \"place_fips\",\n        placens as \"place_ns\",\n        geoid as \"place_geoid\",\n        name as \"place_name\",\n        classfp as \"class_fips_code\",\n        \n\ncase\n    when \"CLASSFP\" = 'M2'\n    then 'A military or other defense installation entirely within a place'\n    when \"CLASSFP\" = 'C1'\n    then 'An active incorporated place that does not serve as a county subdivision equivalent'\n    when \"CLASSFP\" = 'U1'\n    then 'A census designated place with an official federally recognized name'\n    when \"CLASSFP\" = 'U2'\n    then 'A census designated place without an official federally recognized name'\n    end as \"class_fips\",\n        \"geometry\"\n    from places_source\n),\n\nfootprints_with_blocks as ( -- noqa: ST03\n    \n\nwith b_left_model_with_id as (\n    select\n        /* Generate a temporary ID for footprints. We will need this to group/partition\n        by unique footprints further down. We could use a UUID, but integers are\n        cheaper to generate and compare. */\n        *, seq4() as _tmp_sjoin_id\n    from footprints\n),\n\nb_joined as (\n    select\n      b_left_model_with_id.\"release\",\n      b_left_model_with_id.\"capture_dates_range\",\n      blocks.\"county_fips\",\n      blocks.\"tract\",\n      blocks.\"block\",\n      blocks.\"block_geoid\",\n      b_left_model_with_id.\"geometry\",\n      /* We don't actually need the intersection for every geometry, only for the\n       ones that intersect more than one. However, in order to establish which\n       ones intersect more than one, we need a windowed COUNT partitioned by\n       _tmp_sjoin_id. This is an expensive operation, as it likely triggers a shuffle\n       (even though it should already be sorted by _tmp_id). In testing we've found\n       that it's cheaper to just do the intersection for all the geometries. */\n      st_area(\n        st_intersection(b_left_model_with_id.\"geometry\", blocks.\"geometry\")\n      ) as _tmp_sjoin_intersection,\n      b_left_model_with_id._tmp_sjoin_id\n    from b_left_model_with_id\n    inner join blocks\n    on st_intersects(b_left_model_with_id.\"geometry\", blocks.\"geometry\")\n),\n\nb_deduplicated as (\n    select\n      -- Snowflake doesn't support geometries in max_by. It should, but it doesn't.\n      -- Fortunately, we know that the geometries are identical when partitioned\n      -- by _tmp_sjoin_id, so we can just choose any_value.\n      any_value(\"geometry\") as \"geometry\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"release\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"release\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"capture_dates_range\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"capture_dates_range\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"county_fips\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"county_fips\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"tract\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"tract\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"block\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"block\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"block_geoid\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"block_geoid\"\n      from b_joined\n    group by _tmp_sjoin_id\n)\n\nselect * from b_deduplicated\n),\n\nfootprints_with_blocks_and_places as (\n    \n\nwith p_left_model_with_id as (\n    select\n        /* Generate a temporary ID for footprints. We will need this to group/partition\n        by unique footprints further down. We could use a UUID, but integers are\n        cheaper to generate and compare. */\n        *, seq4() as _tmp_sjoin_id\n    from footprints_with_blocks\n),\n\np_joined as (\n    select\n      p_left_model_with_id.\"release\",\n      p_left_model_with_id.\"capture_dates_range\",\n      p_left_model_with_id.\"county_fips\",\n      p_left_model_with_id.\"tract\",\n      p_left_model_with_id.\"block\",\n      p_left_model_with_id.\"block_geoid\",\n      places.\"place_fips\",\n      places.\"place_ns\",\n      places.\"place_geoid\",\n      places.\"place_name\",\n      places.\"class_fips_code\",\n      places.\"class_fips\",\n      p_left_model_with_id.\"geometry\",\n      /* We don't actually need the intersection for every geometry, only for the\n       ones that intersect more than one. However, in order to establish which\n       ones intersect more than one, we need a windowed COUNT partitioned by\n       _tmp_sjoin_id. This is an expensive operation, as it likely triggers a shuffle\n       (even though it should already be sorted by _tmp_id). In testing we've found\n       that it's cheaper to just do the intersection for all the geometries. */\n      st_area(\n        st_intersection(p_left_model_with_id.\"geometry\", places.\"geometry\")\n      ) as _tmp_sjoin_intersection,\n      p_left_model_with_id._tmp_sjoin_id\n    from p_left_model_with_id\n    left join places\n    on st_intersects(p_left_model_with_id.\"geometry\", places.\"geometry\")\n),\n\np_deduplicated as (\n    select\n      -- Snowflake doesn't support geometries in max_by. It should, but it doesn't.\n      -- Fortunately, we know that the geometries are identical when partitioned\n      -- by _tmp_sjoin_id, so we can just choose any_value.\n      any_value(\"geometry\") as \"geometry\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"release\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"release\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"capture_dates_range\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"capture_dates_range\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"county_fips\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"county_fips\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"tract\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"tract\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"block\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"block\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"block_geoid\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"block_geoid\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"place_fips\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"place_fips\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"place_ns\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"place_ns\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"place_geoid\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"place_geoid\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"place_name\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"place_name\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"class_fips_code\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"class_fips_code\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"class_fips\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"class_fips\"\n      from p_joined\n    group by _tmp_sjoin_id\n)\n\nselect * from p_deduplicated\n),\n\nfootprints_with_blocks_and_places_final as (\n    select\n        *,\n        st_area(\"geometry\") as \"area_sqm\"\n    from footprints_with_blocks_and_places\n)\n\nselect * from footprints_with_blocks_and_places_final", "relation_name": "ANALYTICS_DEV.ci_should_not_create_this_schema_building_footprints.geo_reference__us_building_footprints_with_tiger", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.031677Z", "completed_at": "2025-10-16T21:10:51.048184Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.049907Z", "completed_at": "2025-10-16T21:10:51.049919Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.036214590072631836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.stg_cortex_usage_daily_history", "compiled": true, "compiled_code": "\n\n-- The ORGANIZATION_USAGE schema does not provide a specific\n-- view on Cortex usage, so we need to get it from the overall\n-- metering daily history table.\n-- https://docs.snowflake.com/en/user-guide/snowflake-cortex/aisql#track-costs-for-ai-services\nWITH source AS (\n    SELECT\n        credits_adjustment_cloud_services,\n        region,\n        credits_used,\n        service_type,\n        account_locator,\n        usage_date,\n        account_name,\n        credits_billed,\n        credits_used_cloud_services,\n        organization_name,\n        credits_used_compute\n    FROM snowflake.organization_usage.metering_daily_history\n    WHERE service_type = 'AI_SERVICES'\n),\n\nmetering_daily_history AS (\n    SELECT\n        organization_name,\n        account_name,\n        usage_date,\n        sum(credits_used_compute) AS credits_used_compute,\n        sum(credits_used_cloud_services) AS credits_used_cloud_services,\n        sum(credits_adjustment_cloud_services) AS credits_adjustment_cloud_services,\n        sum(credits_used) AS credits_used,\n        sum(credits_billed) AS credits_billed\n    FROM source\n    GROUP BY organization_name, account_name, usage_date\n)\n\nSELECT *\nFROM metering_daily_history", "relation_name": "TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_cortex_usage_daily_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.021920Z", "completed_at": "2025-10-16T21:10:51.048658Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.050712Z", "completed_at": "2025-10-16T21:10:51.050722Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03748893737792969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.geo_reference__global_ml_building_footprints_with_tiger", "compiled": true, "compiled_code": "with footprints as ( -- noqa: ST03\n    select\n        \"height\",\n        \"geometry\"\n    from RAW_DEV.building_footprints.global_ml_building_footprints\n),\n\nblocks_source as (\n    select *\n    from RAW_DEV.tiger_2022.blocks\n),\n\nplaces_source as (\n    select * from RAW_DEV.tiger_2022.places\n),\n\nblocks as ( -- noqa: ST03\n    select\n        countyfp20 as \"county_fips\",\n        tractce20 as \"tract\",\n        blockce20 as \"block\",\n        geoid20 as \"block_geoid\",\n        \"geometry\"\n    from blocks_source\n),\n\nplaces as ( -- noqa: ST03\n    select\n        placefp as \"place_fips\",\n        placens as \"place_ns\",\n        geoid as \"place_geoid\",\n        name as \"place_name\",\n        classfp as \"class_fips_code\",\n        \n\ncase\n    when \"CLASSFP\" = 'M2'\n    then 'A military or other defense installation entirely within a place'\n    when \"CLASSFP\" = 'C1'\n    then 'An active incorporated place that does not serve as a county subdivision equivalent'\n    when \"CLASSFP\" = 'U1'\n    then 'A census designated place with an official federally recognized name'\n    when \"CLASSFP\" = 'U2'\n    then 'A census designated place without an official federally recognized name'\n    end as \"class_fips\",\n        \"geometry\"\n    from places_source\n),\n\nfootprints_with_blocks as ( -- noqa: ST03\n    \n\nwith b_left_model_with_id as (\n    select\n        /* Generate a temporary ID for footprints. We will need this to group/partition\n        by unique footprints further down. We could use a UUID, but integers are\n        cheaper to generate and compare. */\n        *, seq4() as _tmp_sjoin_id\n    from footprints\n),\n\nb_joined as (\n    select\n      b_left_model_with_id.\"height\",\n      blocks.\"county_fips\",\n      blocks.\"tract\",\n      blocks.\"block\",\n      blocks.\"block_geoid\",\n      b_left_model_with_id.\"geometry\",\n      /* We don't actually need the intersection for every geometry, only for the\n       ones that intersect more than one. However, in order to establish which\n       ones intersect more than one, we need a windowed COUNT partitioned by\n       _tmp_sjoin_id. This is an expensive operation, as it likely triggers a shuffle\n       (even though it should already be sorted by _tmp_id). In testing we've found\n       that it's cheaper to just do the intersection for all the geometries. */\n      st_area(\n        st_intersection(b_left_model_with_id.\"geometry\", blocks.\"geometry\")\n      ) as _tmp_sjoin_intersection,\n      b_left_model_with_id._tmp_sjoin_id\n    from b_left_model_with_id\n    inner join blocks\n    on st_intersects(b_left_model_with_id.\"geometry\", blocks.\"geometry\")\n),\n\nb_deduplicated as (\n    select\n      -- Snowflake doesn't support geometries in max_by. It should, but it doesn't.\n      -- Fortunately, we know that the geometries are identical when partitioned\n      -- by _tmp_sjoin_id, so we can just choose any_value.\n      any_value(\"geometry\") as \"geometry\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"height\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"height\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"county_fips\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"county_fips\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"tract\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"tract\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"block\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"block\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"block_geoid\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"block_geoid\"\n      from b_joined\n    group by _tmp_sjoin_id\n)\n\nselect * from b_deduplicated\n),\n\nfootprints_with_blocks_and_places as (\n    \n\nwith p_left_model_with_id as (\n    select\n        /* Generate a temporary ID for footprints. We will need this to group/partition\n        by unique footprints further down. We could use a UUID, but integers are\n        cheaper to generate and compare. */\n        *, seq4() as _tmp_sjoin_id\n    from footprints_with_blocks\n),\n\np_joined as (\n    select\n      p_left_model_with_id.\"height\",\n      p_left_model_with_id.\"county_fips\",\n      p_left_model_with_id.\"tract\",\n      p_left_model_with_id.\"block\",\n      p_left_model_with_id.\"block_geoid\",\n      places.\"place_fips\",\n      places.\"place_ns\",\n      places.\"place_geoid\",\n      places.\"place_name\",\n      places.\"class_fips_code\",\n      places.\"class_fips\",\n      p_left_model_with_id.\"geometry\",\n      /* We don't actually need the intersection for every geometry, only for the\n       ones that intersect more than one. However, in order to establish which\n       ones intersect more than one, we need a windowed COUNT partitioned by\n       _tmp_sjoin_id. This is an expensive operation, as it likely triggers a shuffle\n       (even though it should already be sorted by _tmp_id). In testing we've found\n       that it's cheaper to just do the intersection for all the geometries. */\n      st_area(\n        st_intersection(p_left_model_with_id.\"geometry\", places.\"geometry\")\n      ) as _tmp_sjoin_intersection,\n      p_left_model_with_id._tmp_sjoin_id\n    from p_left_model_with_id\n    left join places\n    on st_intersects(p_left_model_with_id.\"geometry\", places.\"geometry\")\n),\n\np_deduplicated as (\n    select\n      -- Snowflake doesn't support geometries in max_by. It should, but it doesn't.\n      -- Fortunately, we know that the geometries are identical when partitioned\n      -- by _tmp_sjoin_id, so we can just choose any_value.\n      any_value(\"geometry\") as \"geometry\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"height\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"height\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"county_fips\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"county_fips\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"tract\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"tract\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"block\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"block\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"block_geoid\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"block_geoid\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"place_fips\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"place_fips\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"place_ns\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"place_ns\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"place_geoid\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"place_geoid\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"place_name\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"place_name\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"class_fips_code\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"class_fips_code\",\n      -- max_by returns null if all the values in a group are null. So if we have a left\n      -- join, we need to guard against nulls with a coalesce to return the single value\n      max_by(\"class_fips\", coalesce(_tmp_sjoin_intersection, 1.0)) as \"class_fips\"\n      from p_joined\n    group by _tmp_sjoin_id\n)\n\nselect * from p_deduplicated\n),\n\nfootprints_with_blocks_and_places_final as (\n    select\n        *,\n        st_area(\"geometry\") as \"area_sqm\"\n    from footprints_with_blocks_and_places\n)\n\nselect * from footprints_with_blocks_and_places_final", "relation_name": "ANALYTICS_DEV.ci_should_not_create_this_schema_building_footprints.geo_reference__global_ml_building_footprints_with_tiger", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.016784Z", "completed_at": "2025-10-16T21:10:51.049446Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.051496Z", "completed_at": "2025-10-16T21:10:51.051503Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.038834333419799805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.stg_automatic_clustering_history", "compiled": true, "compiled_code": "\n\nWITH source AS (\n    SELECT\n        num_rows_reclustered,\n        account_locator,\n        database_id,\n        schema_name,\n        database_name,\n        table_id,\n        schema_id,\n        account_name,\n        region,\n        credits_used,\n        organization_name,\n        table_name,\n        usage_date,\n        num_bytes_reclustered\n    FROM snowflake.organization_usage.automatic_clustering_history\n),\n\nautomatic_clustering_history AS (\n    SELECT\n        organization_name,\n        account_name,\n        database_name,\n        schema_name,\n        table_name,\n        usage_date,\n        sum(credits_used) AS credits_used,\n        sum(num_rows_reclustered) AS num_rows_reclustered,\n        sum(num_bytes_reclustered) AS num_bytes_reclustered\n    FROM source\n    GROUP BY ALL\n)\n\nSELECT *\nFROM automatic_clustering_history", "relation_name": "TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_automatic_clustering_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.044957Z", "completed_at": "2025-10-16T21:10:51.052204Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.054662Z", "completed_at": "2025-10-16T21:10:51.054669Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010826349258422852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.stg_data_transfer_history", "compiled": true, "compiled_code": "\n\nWITH source AS (\n    SELECT\n        organization_name,\n        account_name,\n        account_locator,\n        region,\n        usage_date,\n        source_cloud,\n        source_region,\n        target_cloud,\n        target_region,\n        bytes_transferred,\n        transfer_type\n    FROM snowflake.organization_usage.data_transfer_history\n),\n\ndata_transfer_history AS (\n    SELECT\n        organization_name,\n        account_name,\n        usage_date,\n        source_cloud,\n        source_region,\n        target_cloud,\n        target_region,\n        sum(bytes_transferred) AS bytes_transferred\n    FROM source\n    GROUP BY ALL\n)\n\nSELECT *\nFROM data_transfer_history", "relation_name": "TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_data_transfer_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.059605Z", "completed_at": "2025-10-16T21:10:51.071473Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.075655Z", "completed_at": "2025-10-16T21:10:51.075668Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.020260095596313477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.stg_database_storage_usage_history", "compiled": true, "compiled_code": "\n\nWITH source AS (\n    SELECT\n        region,\n        average_hybrid_table_storage_bytes,\n        organization_name,\n        usage_date,\n        database_id,\n        database_name,\n        account_name,\n        average_database_bytes,\n        account_locator,\n        average_failsafe_bytes\n    FROM snowflake.organization_usage.database_storage_usage_history\n),\n\ndatabase_storage_usage_history AS (\n    SELECT\n        organization_name,\n        account_name,\n        database_name,\n        usage_date,\n        AVG(average_hybrid_table_storage_bytes) AS average_hybrid_table_storage_bytes,\n        AVG(average_database_bytes) AS average_database_bytes,\n        AVG(average_failsafe_bytes) AS average_failsafe_bytes\n    FROM source\n    GROUP BY ALL\n)\n\nSELECT *\nFROM database_storage_usage_history", "relation_name": "TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_database_storage_usage_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.063107Z", "completed_at": "2025-10-16T21:10:51.075178Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.076697Z", "completed_at": "2025-10-16T21:10:51.076704Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020741939544677734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.stg_department_of_finance__entities", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith\nbase_entities as (select * from RAW_DEV.state_entities.base_entities),\n\ninvalid_subagencies as (\n    select *\n    from base_entities\n    where contains(\"name\", 'no subagency') and contains(\"name\", 'do not use')\n),\n\nentities as (\n    select\n        -- Extract the first portion of the entity as the name. The other\n        -- two (optional) groups match parentheticals and things like\n        -- \"-- DO NOT USE\" or \" -- DOF USE ONLY\"\n        PUBLIC.extract_name(\"name\") as name,\n        coalesce(l3, l2, l1, b, a) as primary_code,\n        a as agency_code,\n        case\n            when b in (select invalid_subagencies.b from invalid_subagencies) then null else b\n        end as subagency_code,\n        l1,\n        l2,\n        l3,\n        regexp_substr(\"name\", '\\\\((.+?)\\\\)') as parenthetical,\n        contains(lower(\"name\"), 'do not use') as do_not_use,\n        contains(lower(\"name\"), 'abolished') as abolished,\n        regexp_substr(\"name\", '[A-Z/]+ USE ONLY') as restricted_use,\n        \"name\" as name_raw\n    from base_entities\n),\n\nentities_with_extras as (\n    select\n        *,\n        PUBLIC.reorder_name_for_alphabetization(name) as name_alpha,\n        case\n            when coalesce(l3, l2, l1, subagency_code) is null\n                then 'agency'\n            when coalesce(l3, l2, l1) is null\n                then 'subagency'\n            when coalesce(l3, l2) is null\n                then 'L1'\n            when l3 is null\n                then 'L2'\n            else 'L3'\n        end as ucm_level\n    from entities\n)\n\nselect *\nfrom entities_with_extras", "relation_name": "TRANSFORM_DEV.ci_should_not_create_this_schema_department_of_finance.stg_department_of_finance__entities", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.067632Z", "completed_at": "2025-10-16T21:10:51.077475Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.079749Z", "completed_at": "2025-10-16T21:10:51.079756Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.023273706436157227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.stg_ebudget__budgets", "compiled": true, "compiled_code": "with\nagencies_and_departments as (\n    select *\n    from RAW_DEV.state_entities.ebudget_agency_and_department_budgets\n),\n\nebudget_budgets as (\n    select\n        \"web_agency_cd\" as primary_code,\n        \"legal_titl\" as name,\n        \"all_budget_year_dols\" as budget_year_dollars\n    from agencies_and_departments\n)\n\nselect *\nfrom ebudget_budgets", "relation_name": "TRANSFORM_DEV.ci_should_not_create_this_schema_department_of_finance.stg_ebudget__budgets", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.071943Z", "completed_at": "2025-10-16T21:10:51.078486Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.081165Z", "completed_at": "2025-10-16T21:10:51.081175Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.022118091583251953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.stg_materialized_view_refresh_history", "compiled": true, "compiled_code": "\n\nWITH source AS (\n    SELECT\n        schema_name,\n        credits_used,\n        organization_name,\n        database_id,\n        schema_id,\n        table_id,\n        account_locator,\n        account_name,\n        region,\n        database_name,\n        table_name,\n        usage_date\n    FROM snowflake.organization_usage.materialized_view_refresh_history\n),\n\nmaterialized_view_refresh_history AS (\n    SELECT\n        organization_name,\n        account_name,\n        database_name,\n        schema_name,\n        table_name,\n        usage_date,\n        sum(credits_used) AS credits_used\n    FROM source\n    GROUP BY ALL\n)\n\nSELECT *\nFROM materialized_view_refresh_history", "relation_name": "TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_materialized_view_refresh_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.085200Z", "completed_at": "2025-10-16T21:10:51.100206Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.101623Z", "completed_at": "2025-10-16T21:10:51.101634Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02111959457397461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.stg_metering_daily_history", "compiled": true, "compiled_code": "\n\nWITH source AS (\n    SELECT\n        credits_adjustment_cloud_services,\n        region,\n        credits_used,\n        service_type,\n        account_locator,\n        usage_date,\n        account_name,\n        credits_billed,\n        credits_used_cloud_services,\n        organization_name,\n        credits_used_compute\n    FROM snowflake.organization_usage.metering_daily_history\n),\n\nmetering_daily_history AS (\n    SELECT\n        organization_name,\n        account_name,\n        usage_date,\n        sum(credits_used_compute) AS credits_used_compute,\n        sum(credits_used_cloud_services) AS credits_used_cloud_services,\n        sum(credits_adjustment_cloud_services) AS credits_adjustment_cloud_services,\n        sum(credits_used) AS credits_used,\n        sum(credits_billed) AS credits_billed\n    FROM source\n    GROUP BY ALL\n)\n\nSELECT *\nFROM metering_daily_history", "relation_name": "TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_metering_daily_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.089439Z", "completed_at": "2025-10-16T21:10:51.101130Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.102911Z", "completed_at": "2025-10-16T21:10:51.102918Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021085500717163086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.stg_pipe_usage_history", "compiled": true, "compiled_code": "\n\nWITH source AS (\n    SELECT\n        region,\n        organization_name,\n        bytes_inserted,\n        files_inserted,\n        usage_date,\n        account_locator,\n        credits_used,\n        account_name,\n        pipe_id,\n        pipe_name\n    FROM snowflake.organization_usage.pipe_usage_history\n),\n\npipe_usage_history AS (\n    SELECT\n        organization_name,\n        account_name,\n        pipe_name,\n        usage_date,\n        sum(bytes_inserted) AS bytes_inserted,\n        sum(files_inserted) AS files_inserted,\n        sum(credits_used) AS credits_used\n    FROM source\n    GROUP BY ALL\n)\n\nSELECT *\nFROM pipe_usage_history", "relation_name": "TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_pipe_usage_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.093859Z", "completed_at": "2025-10-16T21:10:51.102413Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.104865Z", "completed_at": "2025-10-16T21:10:51.104873Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020311832427978516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.stg_stage_storage_usage_history", "compiled": true, "compiled_code": "\n\nWITH source AS (\n    SELECT\n        organization_name,\n        account_locator,\n        account_name,\n        region,\n        usage_date,\n        average_stage_bytes\n    FROM snowflake.organization_usage.stage_storage_usage_history\n),\n\nstage_storage_usage_history AS (\n    SELECT\n        organization_name,\n        account_name,\n        usage_date,\n        avg(average_stage_bytes) AS average_stage_bytes\n    FROM source\n    GROUP BY ALL\n)\n\nSELECT *\nFROM stage_storage_usage_history", "relation_name": "TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_stage_storage_usage_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.096900Z", "completed_at": "2025-10-16T21:10:51.104215Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.106892Z", "completed_at": "2025-10-16T21:10:51.106899Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018143415451049805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.stg_storage_daily_history", "compiled": true, "compiled_code": "\n\nWITH source AS (\n    SELECT\n        organization_name,\n        account_name,\n        account_locator,\n        region,\n        usage_date,\n        service_type,\n        average_bytes,\n        credits\n    FROM snowflake.organization_usage.storage_daily_history\n),\n\nstorage_daily_history AS (\n    SELECT\n        organization_name,\n        account_name,\n        usage_date,\n        avg(average_bytes) AS average_bytes,\n        sum(credits) AS credits_used\n    FROM source\n    GROUP BY ALL\n)\n\nSELECT *\nFROM storage_daily_history", "relation_name": "TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_storage_daily_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.110951Z", "completed_at": "2025-10-16T21:10:51.128643Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.133645Z", "completed_at": "2025-10-16T21:10:51.133660Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.027433156967163086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.stg_warehouse_metering_history", "compiled": true, "compiled_code": "\n\nWITH source AS (\n    SELECT\n        account_name,\n        warehouse_id,\n        credits_used,\n        credits_used_compute,\n        region,\n        start_time,\n        credits_used_cloud_services,\n        warehouse_name,\n        organization_name,\n        service_type,\n        account_locator,\n        end_time\n    FROM snowflake.organization_usage.warehouse_metering_history\n),\n\nwarehouse_metering_history AS (\n    SELECT\n        organization_name,\n        account_name,\n        warehouse_name,\n        to_date(start_time) AS usage_date,\n        sum(credits_used) AS credits_used,\n        sum(credits_used_compute) AS credits_used_compute,\n        sum(credits_used_cloud_services) AS credits_used_cloud_services\n    FROM source\n    GROUP BY ALL\n)\n\nSELECT *\nFROM warehouse_metering_history", "relation_name": "TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_warehouse_metering_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.120241Z", "completed_at": "2025-10-16T21:10:51.134634Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.136978Z", "completed_at": "2025-10-16T21:10:51.136985Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.027199506759643555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.source_not_null_state_entities_base_entities__A_.3b0e8bceb2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect \"A\"\nfrom RAW_DEV.state_entities.base_entities\nwhere \"A\" is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.115087Z", "completed_at": "2025-10-16T21:10:51.135757Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.138299Z", "completed_at": "2025-10-16T21:10:51.138310Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0301358699798584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.dbt_utils_source_unique_combination_of_columns_state_entities_base_entities_A__B__L1__L2__L3.3301323f63", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        A, B, L1, L2, L3\n    from RAW_DEV.state_entities.base_entities\n    group by A, B, L1, L2, L3\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.129327Z", "completed_at": "2025-10-16T21:10:51.136237Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.139057Z", "completed_at": "2025-10-16T21:10:51.139084Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02518463134765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.source_not_null_state_entities_base_entities__name_.175bb24173", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect \"name\"\nfrom RAW_DEV.state_entities.base_entities\nwhere \"name\" is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.142438Z", "completed_at": "2025-10-16T21:10:51.157601Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.167855Z", "completed_at": "2025-10-16T21:10:51.167866Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03020334243774414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.source_not_null_state_entities_ebudget_agency_and_department_budgets__org_cd_.6650ae0ce8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect \"org_cd\"\nfrom RAW_DEV.state_entities.ebudget_agency_and_department_budgets\nwhere \"org_cd\" is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.153734Z", "completed_at": "2025-10-16T21:10:51.168765Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.171052Z", "completed_at": "2025-10-16T21:10:51.171080Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02466440200805664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.source_not_null_state_entities_ebudget_program_budgets__program_code_.29940cbe43", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect \"program_code\"\nfrom RAW_DEV.state_entities.ebudget_program_budgets\nwhere \"program_code\" is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.149325Z", "completed_at": "2025-10-16T21:10:51.169967Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.172354Z", "completed_at": "2025-10-16T21:10:51.172362Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.030519485473632812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.source_not_null_state_entities_ebudget_agency_and_department_budgets__web_agency_cd_.1100593dca", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect \"web_agency_cd\"\nfrom RAW_DEV.state_entities.ebudget_agency_and_department_budgets\nwhere \"web_agency_cd\" is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.158115Z", "completed_at": "2025-10-16T21:10:51.170511Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.173110Z", "completed_at": "2025-10-16T21:10:51.173120Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.026079893112182617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.source_unique_state_entities_base_entities__L3_.28ccbe9ad4", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    \"L3\" as unique_field,\n    count(*) as n_records\n\nfrom RAW_DEV.state_entities.base_entities\nwhere \"L3\" is not null\ngroup by \"L3\"\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.176578Z", "completed_at": "2025-10-16T21:10:51.187773Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.194798Z", "completed_at": "2025-10-16T21:10:51.194810Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.023090124130249023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.source_unique_state_entities_ebudget_agency_and_department_budgets__org_cd_.f2687093d8", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    \"org_cd\" as unique_field,\n    count(*) as n_records\n\nfrom RAW_DEV.state_entities.ebudget_agency_and_department_budgets\nwhere \"org_cd\" is not null\ngroup by \"org_cd\"\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.183333Z", "completed_at": "2025-10-16T21:10:51.195922Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.197036Z", "completed_at": "2025-10-16T21:10:51.197043Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021060466766357422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.source_unique_state_entities_ebudget_agency_and_department_budgets__web_agency_cd_.926c843b75", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    \"web_agency_cd\" as unique_field,\n    count(*) as n_records\n\nfrom RAW_DEV.state_entities.ebudget_agency_and_department_budgets\nwhere \"web_agency_cd\" is not null\ngroup by \"web_agency_cd\"\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.190819Z", "completed_at": "2025-10-16T21:10:51.198369Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.200569Z", "completed_at": "2025-10-16T21:10:51.200576Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.019511699676513672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_cortex_usage_daily_history_CREDITS_ADJUSTMENT_CLOUD_SERVICES.515dc5d8b2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CREDITS_ADJUSTMENT_CLOUD_SERVICES\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_cortex_usage_daily_history\nwhere CREDITS_ADJUSTMENT_CLOUD_SERVICES is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.188400Z", "completed_at": "2025-10-16T21:10:51.199532Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.201812Z", "completed_at": "2025-10-16T21:10:51.201821Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02135777473449707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.int_cortex_usage_daily_history", "compiled": true, "compiled_code": "with source as (\n    select * from TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_cortex_usage_daily_history\n),\n\nusage_history as (\n    select\n        organization_name,\n        account_name,\n        usage_date,\n        sum(credits_used) as credits_used\n    from source\n    group by organization_name, account_name, usage_date\n)\n\nselect * from usage_history", "relation_name": "TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.int_cortex_usage_daily_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.202560Z", "completed_at": "2025-10-16T21:10:51.208957Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.214006Z", "completed_at": "2025-10-16T21:10:51.214015Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016242504119873047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_cortex_usage_daily_history_CREDITS_BILLED.0ee925ed8e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CREDITS_BILLED\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_cortex_usage_daily_history\nwhere CREDITS_BILLED is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.209452Z", "completed_at": "2025-10-16T21:10:51.215331Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.223963Z", "completed_at": "2025-10-16T21:10:51.223973Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.022745370864868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_cortex_usage_daily_history_CREDITS_USED.5ebe946f2d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CREDITS_USED\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_cortex_usage_daily_history\nwhere CREDITS_USED is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.215806Z", "completed_at": "2025-10-16T21:10:51.225510Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.227719Z", "completed_at": "2025-10-16T21:10:51.227726Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.019369125366210938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_cortex_usage_daily_history_CREDITS_USED_CLOUD_SERVICES.8311ae0b3f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CREDITS_USED_CLOUD_SERVICES\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_cortex_usage_daily_history\nwhere CREDITS_USED_CLOUD_SERVICES is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.220532Z", "completed_at": "2025-10-16T21:10:51.227233Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.231860Z", "completed_at": "2025-10-16T21:10:51.231875Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.019128799438476562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_cortex_usage_daily_history_CREDITS_USED_COMPUTE.a9a1ffe4d3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CREDITS_USED_COMPUTE\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_cortex_usage_daily_history\nwhere CREDITS_USED_COMPUTE is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.228965Z", "completed_at": "2025-10-16T21:10:51.238642Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.240382Z", "completed_at": "2025-10-16T21:10:51.240393Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015462875366210938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.int_automatic_clustering_history", "compiled": true, "compiled_code": "with source as (\n    select * from TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_automatic_clustering_history\n),\n\nusage_history as (\n    select\n        organization_name,\n        account_name,\n        usage_date,\n        sum(credits_used) as credits_used\n    from source\n    group by all\n)\n\nselect * from usage_history", "relation_name": "TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.int_automatic_clustering_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.235085Z", "completed_at": "2025-10-16T21:10:51.245557Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.250372Z", "completed_at": "2025-10-16T21:10:51.250386Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02201223373413086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_automatic_clustering_history_CREDITS_USED.a725f2a3a4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CREDITS_USED\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_automatic_clustering_history\nwhere CREDITS_USED is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.241641Z", "completed_at": "2025-10-16T21:10:51.251862Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.254182Z", "completed_at": "2025-10-16T21:10:51.254191Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.019774198532104492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_automatic_clustering_history_NUM_BYTES_RECLUSTERED.50d6f53e7c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect NUM_BYTES_RECLUSTERED\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_automatic_clustering_history\nwhere NUM_BYTES_RECLUSTERED is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.246744Z", "completed_at": "2025-10-16T21:10:51.253159Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.255449Z", "completed_at": "2025-10-16T21:10:51.255459Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01641058921813965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_automatic_clustering_history_NUM_ROWS_RECLUSTERED.9cbdf10dc6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect NUM_ROWS_RECLUSTERED\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_automatic_clustering_history\nwhere NUM_ROWS_RECLUSTERED is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.256215Z", "completed_at": "2025-10-16T21:10:51.262433Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.267731Z", "completed_at": "2025-10-16T21:10:51.267739Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016434192657470703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_data_transfer_history_BYTES_TRANSFERRED.5c6dcbbaf5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect BYTES_TRANSFERRED\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_data_transfer_history\nwhere BYTES_TRANSFERRED is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.262903Z", "completed_at": "2025-10-16T21:10:51.272736Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.278176Z", "completed_at": "2025-10-16T21:10:51.278188Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023361682891845703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_database_storage_usage_history_AVERAGE_DATABASE_BYTES.39c5c9dc44", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect AVERAGE_DATABASE_BYTES\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_database_storage_usage_history\nwhere AVERAGE_DATABASE_BYTES is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.269093Z", "completed_at": "2025-10-16T21:10:51.279007Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.280810Z", "completed_at": "2025-10-16T21:10:51.280818Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01901984214782715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_database_storage_usage_history_AVERAGE_FAILSAFE_BYTES.9c9e705d16", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect AVERAGE_FAILSAFE_BYTES\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_database_storage_usage_history\nwhere AVERAGE_FAILSAFE_BYTES is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.273850Z", "completed_at": "2025-10-16T21:10:51.281574Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.283571Z", "completed_at": "2025-10-16T21:10:51.283578Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017109155654907227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_database_storage_usage_history_AVERAGE_HYBRID_TABLE_STORAGE_BYTES.81b58c1e43", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect AVERAGE_HYBRID_TABLE_STORAGE_BYTES\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_database_storage_usage_history\nwhere AVERAGE_HYBRID_TABLE_STORAGE_BYTES is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.288848Z", "completed_at": "2025-10-16T21:10:51.296795Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.298523Z", "completed_at": "2025-10-16T21:10:51.298536Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01607966423034668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.int_state_entities__technical", "compiled": true, "compiled_code": "\n\nwith\ntechnical_entities as (\n    select *\n    from TRANSFORM_DEV.ci_should_not_create_this_schema_department_of_finance.stg_department_of_finance__entities\n    where\n        (do_not_use = false and abolished = false)\n        and (restricted_use is not null or cast(primary_code as int) >= 9000)\n)\n\nselect *\nfrom technical_entities", "relation_name": "TRANSFORM_DEV.ci_should_not_create_this_schema_state_entities.int_state_entities__technical", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.284374Z", "completed_at": "2025-10-16T21:10:51.297426Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.299330Z", "completed_at": "2025-10-16T21:10:51.299337Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019816875457763672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.int_state_entities__active", "compiled": true, "compiled_code": "\n\nwith\nactive_entities as (\n    select *\n    from TRANSFORM_DEV.ci_should_not_create_this_schema_department_of_finance.stg_department_of_finance__entities\n    where\n        do_not_use = false\n        and abolished = false\n        and restricted_use is null\n        and cast(primary_code as int) < 9000\n        and not regexp_like(lower(name_raw), 'moved to|renum\\.? to')\n)\n\nselect *\nfrom active_entities", "relation_name": "TRANSFORM_DEV.ci_should_not_create_this_schema_state_entities.int_state_entities__active", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.293302Z", "completed_at": "2025-10-16T21:10:51.300012Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.305886Z", "completed_at": "2025-10-16T21:10:51.305894Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018291711807250977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_department_of_finance__entities_primary_code.ab13df4014", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect primary_code\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_department_of_finance.stg_department_of_finance__entities\nwhere primary_code is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.300601Z", "completed_at": "2025-10-16T21:10:51.307692Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.309668Z", "completed_at": "2025-10-16T21:10:51.309675Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017209529876708984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_ebudget__budgets_primary_code.11fe170121", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect primary_code\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_department_of_finance.stg_ebudget__budgets\nwhere primary_code is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.313227Z", "completed_at": "2025-10-16T21:10:51.319118Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.324305Z", "completed_at": "2025-10-16T21:10:51.324315Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017174720764160156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_materialized_view_refresh_history_CREDITS_USED.99ec1064cb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CREDITS_USED\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_materialized_view_refresh_history\nwhere CREDITS_USED is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.310885Z", "completed_at": "2025-10-16T21:10:51.319578Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.325110Z", "completed_at": "2025-10-16T21:10:51.325121Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01848912239074707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.int_materialized_view_refresh_history", "compiled": true, "compiled_code": "with source as (\n    select * from TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_materialized_view_refresh_history\n),\n\nusage_history as (\n    select\n        organization_name,\n        account_name,\n        usage_date,\n        sum(credits_used) as credits_used\n    from source\n    group by all\n)\n\nselect * from usage_history", "relation_name": "TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.int_materialized_view_refresh_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.320041Z", "completed_at": "2025-10-16T21:10:51.330094Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.332041Z", "completed_at": "2025-10-16T21:10:51.332052Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.021732807159423828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_metering_daily_history_CREDITS_ADJUSTMENT_CLOUD_SERVICES.c3a1b97e7c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CREDITS_ADJUSTMENT_CLOUD_SERVICES\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_metering_daily_history\nwhere CREDITS_ADJUSTMENT_CLOUD_SERVICES is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.325983Z", "completed_at": "2025-10-16T21:10:51.332775Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.335334Z", "completed_at": "2025-10-16T21:10:51.335343Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016937255859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_metering_daily_history_CREDITS_BILLED.c40a5ea2de", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CREDITS_BILLED\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_metering_daily_history\nwhere CREDITS_BILLED is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.336596Z", "completed_at": "2025-10-16T21:10:51.351369Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.354552Z", "completed_at": "2025-10-16T21:10:51.354562Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.023166894912719727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_metering_daily_history_CREDITS_USED.e0bda296a7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CREDITS_USED\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_metering_daily_history\nwhere CREDITS_USED is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.341329Z", "completed_at": "2025-10-16T21:10:51.353974Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.357866Z", "completed_at": "2025-10-16T21:10:51.357877Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0247194766998291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_metering_daily_history_CREDITS_USED_CLOUD_SERVICES.5e7b5bc5ca", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CREDITS_USED_CLOUD_SERVICES\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_metering_daily_history\nwhere CREDITS_USED_CLOUD_SERVICES is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.346240Z", "completed_at": "2025-10-16T21:10:51.358803Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.360625Z", "completed_at": "2025-10-16T21:10:51.360633Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.020579099655151367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_metering_daily_history_CREDITS_USED_COMPUTE.de66f49909", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CREDITS_USED_COMPUTE\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_metering_daily_history\nwhere CREDITS_USED_COMPUTE is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.355428Z", "completed_at": "2025-10-16T21:10:51.361387Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.363459Z", "completed_at": "2025-10-16T21:10:51.363466Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01802229881286621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.int_pipe_usage_history", "compiled": true, "compiled_code": "with source as (\n    select * from TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_pipe_usage_history\n),\n\nusage_history as (\n    select\n        organization_name,\n        account_name,\n        usage_date,\n        sum(credits_used) as credits_used\n    from source\n    group by all\n)\n\nselect * from usage_history", "relation_name": "TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.int_pipe_usage_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.370259Z", "completed_at": "2025-10-16T21:10:51.379738Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.384979Z", "completed_at": "2025-10-16T21:10:51.384990Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.022738933563232422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_pipe_usage_history_CREDITS_USED.307c286f38", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CREDITS_USED\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_pipe_usage_history\nwhere CREDITS_USED is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.366184Z", "completed_at": "2025-10-16T21:10:51.380362Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.385762Z", "completed_at": "2025-10-16T21:10:51.385772Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.024000167846679688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_pipe_usage_history_BYTES_INSERTED.1a924fd3d2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect BYTES_INSERTED\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_pipe_usage_history\nwhere BYTES_INSERTED is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.375116Z", "completed_at": "2025-10-16T21:10:51.384323Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.386645Z", "completed_at": "2025-10-16T21:10:51.386654Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.021564722061157227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_pipe_usage_history_FILES_INSERTED.848ae546a1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect FILES_INSERTED\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_pipe_usage_history\nwhere FILES_INSERTED is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.380849Z", "completed_at": "2025-10-16T21:10:51.387918Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.390084Z", "completed_at": "2025-10-16T21:10:51.390092Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015769481658935547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_stage_storage_usage_history_AVERAGE_STAGE_BYTES.e149896f90", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect AVERAGE_STAGE_BYTES\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_stage_storage_usage_history\nwhere AVERAGE_STAGE_BYTES is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.397463Z", "completed_at": "2025-10-16T21:10:51.405398Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.409962Z", "completed_at": "2025-10-16T21:10:51.409975Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01926898956298828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_storage_daily_history_AVERAGE_BYTES.5ea21eea9f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect AVERAGE_BYTES\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_storage_daily_history\nwhere AVERAGE_BYTES is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.400982Z", "completed_at": "2025-10-16T21:10:51.408711Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.410832Z", "completed_at": "2025-10-16T21:10:51.410841Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.019600868225097656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_storage_daily_history_CREDITS_USED.d25246cda1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CREDITS_USED\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_storage_daily_history\nwhere CREDITS_USED is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.393873Z", "completed_at": "2025-10-16T21:10:51.409426Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.412087Z", "completed_at": "2025-10-16T21:10:51.412094Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02259230613708496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.int_storage_daily_history", "compiled": true, "compiled_code": "with source as (\n    select * from TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_storage_daily_history\n),\n\nusage_history as (\n    select\n        organization_name,\n        account_name,\n        usage_date,\n        sum(credits_used) as credits_used\n    from source\n    group by all\n)\n\nselect * from usage_history", "relation_name": "TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.int_storage_daily_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.406004Z", "completed_at": "2025-10-16T21:10:51.411610Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.413896Z", "completed_at": "2025-10-16T21:10:51.413903Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017151594161987305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.int_warehouse_metering_history", "compiled": true, "compiled_code": "with source as (\n    select * from TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_warehouse_metering_history\n),\n\nusage_history as (\n    select\n        organization_name,\n        account_name,\n        usage_date,\n        sum(credits_used) as credits_used\n    from source\n    group by all\n)\n\nselect * from usage_history", "relation_name": "TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.int_warehouse_metering_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.422847Z", "completed_at": "2025-10-16T21:10:51.434656Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.435850Z", "completed_at": "2025-10-16T21:10:51.435865Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.020251750946044922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_warehouse_metering_history_CREDITS_USED_CLOUD_SERVICES.73169b4790", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CREDITS_USED_CLOUD_SERVICES\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_warehouse_metering_history\nwhere CREDITS_USED_CLOUD_SERVICES is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.427610Z", "completed_at": "2025-10-16T21:10:51.435270Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.437132Z", "completed_at": "2025-10-16T21:10:51.437139Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02041006088256836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_warehouse_metering_history_CREDITS_USED_COMPUTE.28893f37fe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CREDITS_USED_COMPUTE\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_warehouse_metering_history\nwhere CREDITS_USED_COMPUTE is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.419343Z", "completed_at": "2025-10-16T21:10:51.436643Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.438947Z", "completed_at": "2025-10-16T21:10:51.438953Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02384805679321289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_stg_warehouse_metering_history_CREDITS_USED.6be5e83057", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CREDITS_USED\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.stg_warehouse_metering_history\nwhere CREDITS_USED is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.431337Z", "completed_at": "2025-10-16T21:10:51.438437Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.440755Z", "completed_at": "2025-10-16T21:10:51.440762Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.022464990615844727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.dim_state_entities__agencies", "compiled": true, "compiled_code": "\n\nwith\nagencies as (\n    select\n        name,\n        agency_code\n    from TRANSFORM_DEV.ci_should_not_create_this_schema_state_entities.int_state_entities__active\n    where subagency_code is null and l1 is null\n)\n\nselect *\nfrom agencies", "relation_name": "ANALYTICS_DEV.ci_should_not_create_this_schema_state_entities.dim_state_entities__agencies", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.444794Z", "completed_at": "2025-10-16T21:10:51.457015Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.461081Z", "completed_at": "2025-10-16T21:10:51.461095Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.020978927612304688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.int_state_entities__budgets", "compiled": true, "compiled_code": "\n\nwith\nactive_entities as (select * from TRANSFORM_DEV.ci_should_not_create_this_schema_state_entities.int_state_entities__active),\n\nbudgets as (select * from TRANSFORM_DEV.ci_should_not_create_this_schema_department_of_finance.stg_ebudget__budgets),\n\nactive_agencies_and_departments as (\n    -- only select at deparment level or higher\n    select * from active_entities\n    where coalesce(l2, l3) is null\n),\n\nactive_entity_budgets as (\n    select\n        active_agencies_and_departments.primary_code,\n        active_agencies_and_departments.ucm_level,\n        active_agencies_and_departments.name,\n        active_agencies_and_departments.name_alpha,\n        budgets.name as budget_name,\n        budgets.budget_year_dollars\n    from active_agencies_and_departments\n    left join\n        budgets\n        on active_agencies_and_departments.primary_code = budgets.primary_code\n)\n\nselect *\nfrom active_entity_budgets\norder by primary_code asc", "relation_name": "TRANSFORM_DEV.ci_should_not_create_this_schema_state_entities.int_state_entities__budgets", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.448895Z", "completed_at": "2025-10-16T21:10:51.462735Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.464858Z", "completed_at": "2025-10-16T21:10:51.464868Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.022899866104125977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_int_state_entities__active_primary_code.498a9cc863", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect primary_code\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_state_entities.int_state_entities__active\nwhere primary_code is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.452976Z", "completed_at": "2025-10-16T21:10:51.463393Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.465617Z", "completed_at": "2025-10-16T21:10:51.465624Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02206897735595703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_int_state_entities__technical_primary_code.92bdfb0772", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect primary_code\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_state_entities.int_state_entities__technical\nwhere primary_code is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.457624Z", "completed_at": "2025-10-16T21:10:51.464393Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.466892Z", "completed_at": "2025-10-16T21:10:51.466899Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.019147634506225586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.unique_int_state_entities__active_primary_code.cb6e0784fe", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    primary_code as unique_field,\n    count(*) as n_records\n\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_state_entities.int_state_entities__active\nwhere primary_code is not null\ngroup by primary_code\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.468742Z", "completed_at": "2025-10-16T21:10:51.479805Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.487941Z", "completed_at": "2025-10-16T21:10:51.487957Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.024216413497924805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dse_analytics.snowflake_costs_by_date", "compiled": true, "compiled_code": "/*\nTODO: this does not yet account for credits consumed by:\n\n  * Query acceleration\n  * Search optimization\n  * Replication/failover groups\n*/\n\nwith automatic_clustering_history as (\n    select\n        account_name,\n        usage_date,\n        'automatic clustering' as usage_type,\n        credits_used\n    from TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.int_automatic_clustering_history\n),\n\nmaterialized_view_refresh_history as (\n    select\n        account_name,\n        usage_date,\n        'materialized view' as usage_type,\n        credits_used\n    from TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.int_materialized_view_refresh_history\n),\n\npipe_usage_history as (\n    select\n        account_name,\n        usage_date,\n        'pipe' as usage_type,\n        credits_used\n    from TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.int_pipe_usage_history\n),\n\nstorage_daily_history as (\n    select\n        account_name,\n        usage_date,\n        'storage' as usage_type,\n        credits_used\n    from TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.int_storage_daily_history\n),\n\nwarehouse_metering_history as (\n    select\n        account_name,\n        usage_date,\n        'warehouse' as usage_type,\n        credits_used\n    from TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.int_warehouse_metering_history\n),\n\ncortex_usage_daily_history as (\n    select\n        account_name,\n        usage_date,\n        'cortex' as usage_type,\n        credits_used\n    from TRANSFORM_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.int_cortex_usage_daily_history\n),\n\n-- Combine the data in long form to allow for easy\n-- aggregations and visualizations.\ncombined as (\n    select * from automatic_clustering_history\n    union all\n    select * from materialized_view_refresh_history\n    union all\n    select * from pipe_usage_history\n    union all\n    select * from storage_daily_history\n    union all\n    select * from warehouse_metering_history\n    union all\n    select * from cortex_usage_daily_history\n)\n\nselect * from combined", "relation_name": "ANALYTICS_DEV.ci_should_not_create_this_schema_snowflake_cost_tracking.snowflake_costs_by_date", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.476451Z", "completed_at": "2025-10-16T21:10:51.494757Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.496899Z", "completed_at": "2025-10-16T21:10:51.496908Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023736953735351562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_dim_state_entities__agencies_agency_code.8ad3a79d8e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect agency_code\nfrom ANALYTICS_DEV.ci_should_not_create_this_schema_state_entities.dim_state_entities__agencies\nwhere agency_code is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.480527Z", "completed_at": "2025-10-16T21:10:51.495288Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.497673Z", "completed_at": "2025-10-16T21:10:51.497680Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02387070655822754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_dim_state_entities__agencies_name.d3e367a95b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom ANALYTICS_DEV.ci_should_not_create_this_schema_state_entities.dim_state_entities__agencies\nwhere name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.484380Z", "completed_at": "2025-10-16T21:10:51.495900Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.498436Z", "completed_at": "2025-10-16T21:10:51.498443Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02402210235595703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.unique_dim_state_entities__agencies_agency_code.efd290c291", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    agency_code as unique_field,\n    count(*) as n_records\n\nfrom ANALYTICS_DEV.ci_should_not_create_this_schema_state_entities.dim_state_entities__agencies\nwhere agency_code is not null\ngroup by agency_code\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.490905Z", "completed_at": "2025-10-16T21:10:51.496371Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.499173Z", "completed_at": "2025-10-16T21:10:51.499180Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009519338607788086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.unique_dim_state_entities__agencies_name.44718adf21", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    name as unique_field,\n    count(*) as n_records\n\nfrom ANALYTICS_DEV.ci_should_not_create_this_schema_state_entities.dim_state_entities__agencies\nwhere name is not null\ngroup by name\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T21:10:51.501589Z", "completed_at": "2025-10-16T21:10:51.505012Z"}, {"name": "execute", "started_at": "2025-10-16T21:10:51.505461Z", "completed_at": "2025-10-16T21:10:51.505467Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004863262176513672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dse_analytics.not_null_int_state_entities__budgets_primary_code.2d2e132a3f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect primary_code\nfrom TRANSFORM_DEV.ci_should_not_create_this_schema_state_entities.int_state_entities__budgets\nwhere primary_code is null\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 5.853341579437256, "args": {"use_colors_file": true, "send_anonymous_usage_stats": false, "log_path": "transform/logs", "use_colors": true, "state_modified_compare_vars": false, "quiet": false, "exclude": [], "profiles_dir": "ci", "require_explicit_package_overrides_for_builtin_materializations": true, "static": false, "select": [], "introspect": true, "log_level": "info", "state_modified_compare_more_unrendered_values": true, "require_resource_names_without_spaces": true, "skip_nodes_if_on_run_start_fails": true, "log_format_file": "debug", "partial_parse_file_diff": true, "populate_cache": true, "partial_parse": true, "use_fast_test_edges": false, "warn_error_options": {"error": [], "warn": [], "silence": []}, "show_all_deprecations": false, "strict_mode": false, "log_level_file": "debug", "version_check": true, "compile": true, "log_file_max_bytes": 10485760, "require_nested_cumulative_type_params": false, "require_yaml_configuration_for_mf_time_spines": false, "empty_catalog": false, "static_parser": true, "indirect_selection": "eager", "cache_selected_only": false, "macro_debugging": false, "favor_state": false, "vars": {}, "print": true, "log_format": "default", "printer_width": 80, "defer": false, "which": "generate", "show_resource_report": false, "require_all_warnings_handled_by_warn_error": false, "write_json": true, "invocation_command": "dbt docs generate --project-dir=transform", "require_batched_execution_for_custom_microbatch_strategy": false, "upload_to_artifacts_ingest_api": false, "source_freshness_run_project_hooks": false, "project_dir": "transform", "validate_macro_args": false}}